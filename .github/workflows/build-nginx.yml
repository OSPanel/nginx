name: Build Nginx (MSYS2)

on:
  workflow_dispatch:
    inputs:
      TAG:
        description: 'Введите git tag/branch nginx (например: release-1.28.0, 1.28.0, main). Оставьте пустым или "latest" для последнего.'
        required: false
        default: ''
        type: string

jobs:
  build:
    runs-on: windows-latest

    defaults:
      run:
        shell: msys2 {0}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: MINGW64
          install: >
            base-devel
            mingw-w64-x86_64-toolchain
            git
            wget
            curl
            tar
            xz
            bzip2
            patch
            perl
            p7zip
            mingw-w64-x86_64-pkgconf
            mingw-w64-x86_64-libheif
            mingw-w64-x86_64-libavif
            mingw-w64-x86_64-aom
            mingw-w64-x86_64-dav1d
            mingw-w64-x86_64-rav1e
            mingw-w64-x86_64-libyuv
            mingw-w64-x86_64-freetype
            mingw-w64-x86_64-fontconfig
            mingw-w64-x86_64-harfbuzz
            mingw-w64-x86_64-brotli
            mingw-w64-x86_64-libgd
            mingw-w64-x86_64-libpng
            mingw-w64-x86_64-libtiff
            mingw-w64-x86_64-openjpeg2
            mingw-w64-x86_64-openh264
            mingw-w64-x86_64-x265
            mingw-w64-x86_64-kvazaar
            mingw-w64-x86_64-libwebp
            mingw-w64-x86_64-libimagequant
            mingw-w64-x86_64-jbigkit
            mingw-w64-x86_64-libdeflate
            mingw-w64-x86_64-lerc
            mingw-w64-x86_64-xz
            mingw-w64-x86_64-zstd
            mingw-w64-x86_64-expat
            mingw-w64-x86_64-glib2
            mingw-w64-x86_64-pcre2
            mingw-w64-x86_64-geoip
            mingw-w64-x86_64-libmaxminddb

      - name: Prepare environment
        run: |
          NAME="${{ github.actor }}"
          EMAIL="${{ github.actor }}@users.noreply.github.com"
          echo "BUILD_USER_NAME=$NAME"  >> $GITHUB_ENV
          echo "BUILD_USER_EMAIL=$EMAIL" >> $GITHUB_ENV

          RAW="${{ github.event.inputs.TAG }}"
          if [ -z "$RAW" ] || [ "$RAW" = "latest" ]; then
            echo "TAG=" >> $GITHUB_ENV
          else
            echo "TAG=$RAW" >> $GITHUB_ENV
          fi

      - name: Show toolchain versions
        run: |
          gcc --version
          g++ --version
          make --version
          perl --version

      - name: Build and package nginx
        env:
          TAG: ${{ env.TAG }}
          BUILD_USER_NAME: ${{ env.BUILD_USER_NAME }}
          BUILD_USER_EMAIL: ${{ env.BUILD_USER_EMAIL }}
        run: |
          set -euo pipefail
          mkdir -p Release Release/docs Release/temp Release/logs

          ############################
          # === ФУНКЦИИ ===
          ############################

          log() { echo -e "\033[1;32m[INFO]\033[0m $*"; }
          warn() { echo -e "\033[1;33m[WARN]\033[0m $*" 1>&2; }

          fetch_latest_version() {
            local url="$1" pattern="$2" fallback="$3"
            curl -s "$url" | grep -ioP "$pattern" | sort -ruV | head -1 || echo "$fallback"
          }

          download_and_extract() {
            local url="$1"
            local archive="${url##*/}"
            wget -c -nv "$url"
            case "$archive" in
              *.tar.gz)  tar -xf "$archive" ;;
              *.tar.bz2) tar -xf "$archive" ;;
              *.tar.xz)  tar -xf "$archive" ;;
              *) warn "Неизвестный формат: $archive"; exit 1 ;;
            esac
          }

          copy_missing_deps() {
            local exe
            for exe in Release/nginx-*.exe; do
              [[ -f "$exe" ]] || continue
              log "Проверка зависимостей: $(basename "$exe")"
              while read -r line; do
                local lib path
                lib="$(echo "$line" | awk '{print $1}')"
                if echo "$line" | grep -q "=> /"; then
                  path="$(echo "$line" | awk '{print $3}')"
                  if [[ -f "$path" ]]; then
                    cp -nf "$path" Release/ || true
                  fi
                elif echo "$line" | grep -q "not found"; then
                  warn "Не найдена зависимость: $lib"
                  if [[ -f "/mingw64/bin/${lib}" ]]; then
                    cp -f "/mingw64/bin/${lib}" Release/
                    log "Докопировано: ${lib}"
                  fi
                fi
              done < <(ldd "$exe" || true)
            done
          }

          ############################
          # === НАСТРОЙКА ===
          ############################

          git config --global user.name "$BUILD_USER_NAME"
          git config --global user.email "$BUILD_USER_EMAIL"

          ZLIB="$(fetch_latest_version 'https://zlib.net/' 'zlib-(\\d+\\.)+\\d+' 'zlib-1.3.1')"
          PCRE="$(fetch_latest_version 'https://sourceforge.net/projects/pcre/rss?path=/pcre/' 'pcre-(\\d+\\.)+\\d+' 'pcre-8.45')"
          PCRE2="$(fetch_latest_version 'https://api.github.com/repos/PhilipHazel/pcre2/releases/latest' 'pcre2-(\\d+\\.)+\\d+' 'pcre2-10.45')"
          OPENSSL="$(fetch_latest_version 'https://openssl-library.org/source/' 'openssl-3\\.5\\.\\d+' 'openssl-3.5.2')"

          log "Zlib: $ZLIB"
          log "PCRE: $PCRE"
          log "PCRE2: $PCRE2"
          log "OpenSSL: $OPENSSL"

          ############################
          # === СБОРКА NGINX ===
          ############################

          if [ -d nginx ]; then rm -rf nginx; fi
          if [ -z "$TAG" ]; then
            git clone --depth=1 https://github.com/nginx/nginx.git
          else
            git clone --depth=1 --branch "$TAG" https://github.com/nginx/nginx.git
          fi

          git checkout -b patch || git checkout patch
          mkdir -p docs
          git am -3 nginx-*.patch || true

          configure_args=(
            --sbin-path=nginx.exe
            --conf-path=conf/nginx.conf
            --pid-path=nginx.pid
            --http-log-path=access.log
            --error-log-path=error.log
            --http-client-body-temp-path=temp/client_body
            --http-proxy-temp-path=temp/proxy
            --http-fastcgi-temp-path=temp/fastcgi
            --http-scgi-temp-path=temp/scgi
            --http-uwsgi-temp-path=temp/uwsgi
            --with-http_realip_module
            --with-http_addition_module
            --with-http_sub_module
            --with-http_dav_module
            --with-http_stub_status_module
            --with-http_flv_module
            --with-http_mp4_module
            --with-http_gunzip_module
            --with-http_gzip_static_module
            --with-http_auth_request_module
            --with-http_image_filter_module
            --with-http_random_index_module
            --with-http_secure_link_module
            --with-http_slice_module
            --with-stream_realip_module
            --with-mail
            --with-stream
            --with-poll_module
            "--with-zlib=$ZLIB"
            "--with-pcre=$PCRE"
            --with-pcre-jit
            --with-http_geoip_module
            --with-stream_geoip_module
            --with-ld-opt="-Wl,--gc-sections,--build-id=none"
            --prefix=
            --with-http_v2_module
          )

          log "Release build"
          auto/configure "${configure_args[@]}" \
            --with-cc-opt='-DFD_SETSIZE=32768 -s -O2 -fno-strict-aliasing -pipe'

          make -j"$(nproc)"
          strip -s objs/nginx.exe || true

          version="$(grep NGINX_VERSION src/core/nginx.h | grep -oP '(\\d+\\.)+\\d+')"
          machine_str="$(gcc -dumpmachine | cut -d'-' -f1)"
          mv -f objs/nginx.exe "Release/nginx-${version}-${machine_str}.exe"
          echo "NGINX_VERSION=${version}" > Release/.env



          ############################
          # === УПАКОВКА ===
          ############################

          copy_missing_deps

          PKG_NAME="nginx-${version}.7z"
          pushd Release >/dev/null
          7z a -mx9 "$PKG_NAME" nginx-*.exe *.dll contrib docs conf html temp logs || true
          popd >/dev/null
          echo "PKG_NAME=$PKG_NAME" >> $GITHUB_ENV

      - name: Upload executables
        uses: actions/upload-artifact@v4
        with:
          name: nginx-executables
          path: |
            Release/*.exe
            Release/docs/**
            Release/conf/**
            Release/html/**
            Release/contrib/**

      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PKG_NAME }}
          path: Release/${{ env.PKG_NAME }}

